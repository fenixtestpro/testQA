Импакт анализ
Управление проектами
Импакт анализ — еще один инструмент в разработке ПО, который применяется программистами для облегчения жизни тестировщиков улучшения тестирования. сновная идея импакт анализа — это указание затронутых мест в проекте при разработке новой или изменении старой функциональности. Во время разработки часто возникают ситуации, когда вносишь изменения в одном месте, а это влияет либо на весь проект либо на несколько мест в проекте. При таких изменениях сложно вспомнить и протестировать все необходимые места, особенно если они не покрыты тестами. В результате этого, после сдачи очередного релиза, клиенты начинают обращаться с жалобами на то, что что-то поломалось или не работает.

Представим, что у нас слаженная команда где программисты помогают тестерам, а тестеры программистам (а это, к сожалению, не везде так) и все усилия команды направлены на улучшение качества их программного продукта. И вот после внедрения или изменения очередной функциональности программист уже не просто коммитит свои изменения в репозиторий, а еще и открывает Excel документ (в нашем проекте мы приспособили для этого Excel, но можно подыскать и что-то другое) в котором отмечает какие же места проекта нужно протестировать. Проиллюстрируем это таким образом:

image


В самом начале виден разноцветный список приоритетов — важность или сложность (кому как удобно) того, что будет тестироваться. По вертикали вписываем краткие названия функциональностей, так чтобы было понятно всем о чем идет речь. По горизонтали выписываем те места в проекте, на которые повлияли изменения в функциональности.
Далее начинаем красить таблицу, желательно заранее договориться от критериях важности, чтобы не возникало вопросов по поводу поставленного цвета, а еще лучше проставлять цвета вместе с тем кто разрабатывал и тем кто будет тестировать. Т.к. программист не знает, сколько времени уйдет у тестера на проверку измений, а тестер не знает, сколько программисту понадобится времени на исправление ошибки.

Заполнение таблицы нужно делать с программистом, т.к. тестировщику не известно на какие вкладки могло повлиять то или иное изменение. Программист может по коду просмотреть все места использования измененного/внедренного им метода или класса.

Плюс импакт анализа в том, что вернувшись к тестированию функциональности через длительный промежуток времени, или отдав тестирование в руки нового человека, стоит просто взглянуть на таблицу в которой будут расставлены приоритеты. И уже не нужно будет тратить и без того драгоценное время на воспоминания о том, где нужно тестировать и куда смотреть в первую очередь.
Еще Excel позволяет ставить комментарий на ячейку, с указанием логина того, кто поставил. В комментарий можно дописать либо номер тикета, либо пожелание по тестированию или вставить сслыку на полезный в этом месте документ.